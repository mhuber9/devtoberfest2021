const { getNavigationIfStruct } = require('./structured')
const getColumns = require('../../db/utils/columns')
const _isAsteriskCol = col => col === '*' || (col.ref && col.ref[0] === '*')
const cds = require('../../../../libx/_runtime/cds')

const _isDraft = req => {
  return (
    req.target &&
    ((typeof req.target.name === 'string' && req.target.name.endsWith('_drafts')) ||
      typeof req.target.name === 'object') // > union, which is (currently) only the case with draft
  )
}

const _getColumns = target => {
  const columns = getColumns(target)
  return columns.map(col => ({ ref: [col.name] }))
}

const _rewriteExpandAsterisks = (column, entity, refs) => {
  const navigation = getNavigationIfStruct(entity, refs)
  const targetEntity = navigation && navigation._target

  if (Array.isArray(column.expand) && targetEntity) {
    column.expand.forEach(col => {
      if (col.ref && col.expand) {
        _rewriteExpandAsterisks(col, targetEntity, col.ref)
      }
    })
  }

  if (column.expand === '*') {
    column.expand = _getColumns(targetEntity)
    return
  }

  if (Array.isArray(column.expand)) {
    const asteriskColumnIndex = column.expand.findIndex(col => _isAsteriskCol(col))
    if (asteriskColumnIndex === -1) return // * not found

    column.expand.splice(asteriskColumnIndex, 1)
    const columns = getColumns(targetEntity)
    columns.forEach(col => {
      column.expand.push({ ref: [col.name] })
    })
  }
}

const _rewriteAsterisks = req => {
  if (_isDraft(req) || !req.query.SELECT) return

  if (cds.env.features.odata_new_parser && !req.query.SELECT.columns) {
    req.query.SELECT.columns = _getColumns(req.target)
    return
  }

  if (!req.query.SELECT.columns) return
  const columnsIncludesAsterisk = req.query.SELECT.columns.some(col => _isAsteriskCol(col))

  if (columnsIncludesAsterisk) {
    const expandColumns = req.query.SELECT.columns.filter(column => column.expand)
    const columns = _getColumns(req.target)
    req.query.SELECT.columns = expandColumns.length ? [...columns, ...expandColumns] : columns
  }

  req.query.SELECT.columns.forEach(col => {
    if (col.ref && col.ref[0] !== 'DraftAdministrativeData' && col.expand && req.target) {
      _rewriteExpandAsterisks(col, req.target, col.ref)
    }
  })
}

module.exports = _rewriteAsterisks
